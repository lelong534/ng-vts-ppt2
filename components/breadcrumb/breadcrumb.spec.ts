import { CommonModule } from '@angular/common';
import { Component, DebugElement, ViewChild } from '@angular/core';
import { ComponentFixture, fakeAsync, flush, TestBed, waitForAsync } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { Router, Routes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';

import { VtsDropDownModule } from '@ui-vts/ng-vts/dropdown';
import { VtsIconTestModule } from '@ui-vts/ng-vts/icon/testing';
import { VtsDemoBreadcrumbDropdownComponent } from './demo/dropdown';

import { BidiModule, Dir } from '@angular/cdk/bidi';
import { VtsBreadCrumbItemComponent } from './breadcrumb-item.component';
import { VtsBreadCrumbComponent } from './breadcrumb.component';
import { VtsBreadCrumbModule } from './breadcrumb.module';
import { VtsDemoBreadcrumbBasicComponent } from './demo/basic';
import { VtsDemoBreadcrumbSeparatorComponent } from './demo/separator';

describe('breadcrumb', () => {
  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      imports: [BidiModule, VtsBreadCrumbModule],
      declarations: [VtsDemoBreadcrumbBasicComponent, VtsTestBreadcrumbRtlComponent]
    }).compileComponents();
  }));

  describe('basic', () => {
    let fixture: ComponentFixture<VtsDemoBreadcrumbBasicComponent>;
    let items: DebugElement[];
    let breadcrumb: DebugElement;

    beforeEach(() => {
      fixture = TestBed.createComponent(VtsDemoBreadcrumbBasicComponent);
      items = fixture.debugElement.queryAll(By.directive(VtsBreadCrumbItemComponent));
      breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));
    });

    it('should have correct style', () => {
      fixture.detectChanges();
      expect(
        items.every(item =>
          item.nativeElement.firstElementChild!.classList.contains('vts-breadcrumb-link')
        )
      ).toBe(true);
      expect(
        items.every(item =>
          item.nativeElement.children[1].classList.contains('vts-breadcrumb-separator')
        )
      ).toBe(true);
      expect(breadcrumb.nativeElement.classList.contains('vts-breadcrumb')).toBe(true);
    });
  });

  describe('dropdown', () => {
    let fixture: ComponentFixture<VtsDemoBreadcrumbDropdownComponent>;
    let items: DebugElement[];

    beforeEach(waitForAsync(() => {
      TestBed.configureTestingModule({
        imports: [VtsBreadCrumbModule, VtsDropDownModule],
        declarations: [VtsDemoBreadcrumbDropdownComponent],
        providers: []
      }).compileComponents();
    }));

    beforeEach(() => {
      fixture = TestBed.createComponent(VtsDemoBreadcrumbDropdownComponent);
      items = fixture.debugElement.queryAll(By.directive(VtsBreadCrumbItemComponent));
    });

    it('should dropdown work', () => {
      fixture.detectChanges();

      const dropdownElement = items[2];
      expect(
        (dropdownElement.nativeElement as HTMLElement).querySelector('.vts-dropdown-trigger')
      ).not.toBe(null);
    });
  });

  describe('separator', () => {
    let fixture: ComponentFixture<VtsDemoBreadcrumbSeparatorComponent>;
    let items: DebugElement[];
    let breadcrumbs: DebugElement[];

    beforeEach(waitForAsync(() => {
      TestBed.configureTestingModule({
        imports: [VtsBreadCrumbModule, VtsIconTestModule],
        declarations: [VtsDemoBreadcrumbSeparatorComponent]
      }).compileComponents();
    }));

    beforeEach(() => {
      fixture = TestBed.createComponent(VtsDemoBreadcrumbSeparatorComponent);
      items = fixture.debugElement.queryAll(By.directive(VtsBreadCrumbItemComponent));
      breadcrumbs = fixture.debugElement.queryAll(By.directive(VtsBreadCrumbComponent));
    });

    it('should vtsSeparator work', () => {
      fixture.detectChanges();
      expect(
        items.every(item =>
          item.nativeElement.firstElementChild!.classList.contains('vts-breadcrumb-link')
        )
      ).toBe(true);
      expect(
        items.every(item =>
          item.nativeElement.children[1].classList.contains('vts-breadcrumb-separator')
        )
      ).toBe(true);
      expect(
        breadcrumbs.every(breadcrumb =>
          breadcrumb.nativeElement.classList.contains('vts-breadcrumb')
        )
      ).toBe(true);
      expect(items[0].nativeElement.children[1].innerText.indexOf('>') > -1).toBe(true);
      expect(
        items[3].nativeElement.children[1].firstElementChild!.classList.contains(
          'vtsicon-arrow-right'
        )
      ).toBe(true);
    });
  });

  describe('auto generated', () => {
    let fixture: ComponentFixture<VtsBreadcrumbAutoGenerateDemoComponent>;
    let router: Router;
    let breadcrumb: DebugElement;

    it('should auto generating work', fakeAsync(() => {
      TestBed.configureTestingModule({
        imports: [CommonModule, VtsBreadCrumbModule, RouterTestingModule.withRoutes(routes)],
        declarations: [VtsBreadcrumbAutoGenerateDemoComponent, VtsBreadcrumbNullComponent]
      }).compileComponents();

      fixture = TestBed.createComponent(VtsBreadcrumbAutoGenerateDemoComponent);
      breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));

      fixture.ngZone!.run(() => {
        router = TestBed.inject(Router);
        router.initialNavigation();

        // Should generate 2 breadcrumbs when reaching out of the `data` scope.
        router.navigate(['one', 'two', 'three', 'four']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(2);

        // TODO: pending this test because of Angular's bug: https://github.com/angular/angular/issues/25837
        // const items = fixture.debugElement.queryAll(By.directive(VtsBreadCrumbItemComponent));
        // dispatchMouseEvent(items[1].nativeElement.querySelector('a'), 'click');
        // flushFixture(fixture);
        // expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(1);

        // Should generate breadcrumbs correctly.
        router.navigate(['one', 'two', 'three']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(2);
        router.navigate(['one', 'two']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(1);

        // Shouldn't generate breadcrumb at all.
        router.navigate(['one']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(0);

        router.navigate(['/']);
        flushFixture(fixture);
        router.navigate([{ outlets: { nonPrimary: ['one', 'two'] } }]);
        flushFixture(fixture);
        expect(router.url).toBe('/(nonPrimary:one/two)');
      });
    }));

    it('should route data breadcrumb label work', fakeAsync(() => {
      TestBed.configureTestingModule({
        imports: [
          CommonModule,
          VtsBreadCrumbModule,
          RouterTestingModule.withRoutes(customRouteLabelRoutes)
        ],
        declarations: [VtsBreadcrumbRouteLabelDemoComponent, VtsBreadcrumbNullComponent]
      }).compileComponents();

      fixture = TestBed.createComponent(VtsBreadcrumbRouteLabelDemoComponent);
      breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));

      fixture.ngZone!.run(() => {
        router = TestBed.inject(Router);
        router.initialNavigation();

        // Should vtsRouteLabel value is 'customBreadcrumb'
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.vtsRouteLabel).toBe('customBreadcrumb');

        // Should generate 2 breadcrumbs when reaching out of the `data` scope.
        router.navigate(['one', 'two', 'three', 'four']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(2);
        expect(breadcrumb.componentInstance.breadcrumbs[0].label).toBe('Layer 2');
        expect(breadcrumb.componentInstance.breadcrumbs[1].label).toBe('Layer 3');
      });
    }));

    it('should [vtsRouteLabelFn] work', fakeAsync(() => {
      TestBed.configureTestingModule({
        imports: [
          CommonModule,
          VtsBreadCrumbModule,
          RouterTestingModule.withRoutes(customRouteLabelRoutes)
        ],
        declarations: [VtsBreadcrumbRouteLabelWithCustomFnDemoComponent, VtsBreadcrumbNullComponent]
      }).compileComponents();

      fixture = TestBed.createComponent(VtsBreadcrumbRouteLabelWithCustomFnDemoComponent);
      breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));

      fixture.ngZone!.run(() => {
        router = TestBed.inject(Router);
        router.initialNavigation();

        // Should vtsRouteLabel value is 'customBreadcrumb'
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.vtsRouteLabel).toBe('customBreadcrumb');

        // Should generate 2 breadcrumbs when reaching out of the `data` scope.
        router.navigate(['one', 'two', 'three', 'four']);
        flushFixture(fixture);
        expect(breadcrumb.componentInstance.breadcrumbs.length).toBe(2);
        expect(breadcrumb.componentInstance.breadcrumbs[0].label).toBe('Layer 2 Layer 2');
        expect(breadcrumb.componentInstance.breadcrumbs[1].label).toBe('Layer 3 Layer 3');
      });
    }));

    it('should route data breadcrumb navigate work', fakeAsync(() => {
      TestBed.configureTestingModule({
        imports: [
          CommonModule,
          VtsBreadCrumbModule,
          RouterTestingModule.withRoutes(customRouteLabelRoutes)
        ],
        declarations: [VtsBreadcrumbRouteLabelDemoComponent, VtsBreadcrumbNullComponent]
      }).compileComponents();

      fixture = TestBed.createComponent(VtsBreadcrumbRouteLabelDemoComponent);
      breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));

      fixture.ngZone!.run(() => {
        router = TestBed.inject(Router);
        router.initialNavigation();

        flushFixture(fixture);
        expect(breadcrumb.componentInstance.vtsRouteLabel).toBe('customBreadcrumb');

        router.navigate(['one', 'two', 'three', 'four']);
        flushFixture(fixture);

        fixture.debugElement.query(By.css('a')).nativeElement.click();
        flushFixture(fixture);
        expect(router.url).toBe('/one/two');
      });
    }));

    it('should raise error when RouterModule is not included', fakeAsync(() => {
      TestBed.configureTestingModule({
        imports: [VtsBreadCrumbModule],
        declarations: [VtsBreadcrumbAutoGenerateErrorDemoComponent]
      });

      expect(() => {
        TestBed.compileComponents();
        fixture = TestBed.createComponent(VtsBreadcrumbAutoGenerateErrorDemoComponent);
        fixture.detectChanges();
      }).toThrowError();
    }));
  });

  describe('RTL', () => {
    it('should className correct on dir change', () => {
      const fixture = TestBed.createComponent(VtsTestBreadcrumbRtlComponent);
      const breadcrumb = fixture.debugElement.query(By.directive(VtsBreadCrumbComponent));
      fixture.detectChanges();
      expect(breadcrumb.nativeElement.classList).toContain('vts-breadcrumb-rtl');

      fixture.componentInstance.direction = 'ltr';
      fixture.detectChanges();
      expect(breadcrumb.nativeElement.className).not.toContain('vts-breadcrumb-rtl');
    });
  });
});

// tslint:disable-next-line no-any
function flushFixture(fixture: ComponentFixture<any>): void {
  fixture.detectChanges();
  flush();
  fixture.detectChanges();
}

@Component({
  // tslint:disable-next-line:no-selector
  selector: 'vts-test-breadcrumb',
  template: `
    <vts-breadcrumb [vtsAutoGenerate]="true"></vts-breadcrumb>
    <router-outlet></router-outlet>
    <router-outlet name="nonPrimary"></router-outlet>
  `
})
class VtsBreadcrumbAutoGenerateDemoComponent {}

@Component({
  template: `
    <vts-breadcrumb [vtsAutoGenerate]="true" [vtsRouteLabel]="'customBreadcrumb'"></vts-breadcrumb>
    <router-outlet></router-outlet>
  `
})
class VtsBreadcrumbRouteLabelDemoComponent {}

@Component({
  template: `
    <vts-breadcrumb
      [vtsAutoGenerate]="true"
      [vtsRouteLabel]="'customBreadcrumb'"
      [vtsRouteLabelFn]="labelFn"
    ></vts-breadcrumb>
    <router-outlet></router-outlet>
  `
})
class VtsBreadcrumbRouteLabelWithCustomFnDemoComponent {
  labelFn = (label: string) => (label ? `${label} ${label}` : '');
}

@Component({
  template: '<vts-breadcrumb [vtsAutoGenerate]="true"></vts-breadcrumb>'
})
class VtsBreadcrumbAutoGenerateErrorDemoComponent {}

@Component({
  template: 'empty'
})
class VtsBreadcrumbNullComponent {}

const routes: Routes = [
  {
    path: 'one',
    component: VtsBreadcrumbAutoGenerateDemoComponent,
    data: {
      breadcrumb: ''
    },
    children: [
      {
        path: 'two',
        component: VtsBreadcrumbNullComponent,
        data: {
          breadcrumb: 'Layer 2'
        },
        children: [
          {
            path: 'three',
            component: VtsBreadcrumbNullComponent,
            data: {
              breadcrumb: 'Layer 3'
            },
            children: [
              {
                path: 'four',
                component: VtsBreadcrumbNullComponent,
                data: {
                  breadcrumb: ''
                }
              }
            ]
          }
        ]
      }
    ]
  },
  // Should only work for the primary outlet.
  {
    path: 'one',
    outlet: 'nonPrimary',
    component: VtsBreadcrumbAutoGenerateDemoComponent,
    data: {
      breadcrumb: ''
    },
    children: [
      {
        path: 'two',
        component: VtsBreadcrumbNullComponent,
        data: {
          breadcrumb: 'Layer 2'
        }
      }
    ]
  }
];

const customRouteLabelRoutes: Routes = [
  {
    path: 'one',
    component: VtsBreadcrumbRouteLabelDemoComponent,
    data: {
      customBreadcrumb: ''
    },
    children: [
      {
        path: 'two',
        component: VtsBreadcrumbNullComponent,
        data: {
          customBreadcrumb: 'Layer 2'
        },
        children: [
          {
            path: 'three',
            component: VtsBreadcrumbNullComponent,
            data: {
              customBreadcrumb: 'Layer 3'
            },
            children: [
              {
                path: 'four',
                component: VtsBreadcrumbNullComponent,
                data: {
                  customBreadcrumb: ''
                }
              }
            ]
          }
        ]
      }
    ]
  }
];

@Component({
  template: `
    <div [dir]="direction">
      <vts-demo-breadcrumb-basic></vts-demo-breadcrumb-basic>
    </div>
  `
})
export class VtsTestBreadcrumbRtlComponent {
  @ViewChild(Dir) dir!: Dir;
  direction = 'rtl';
}
